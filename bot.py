import asyncio
import logging
from datetime import datetime, timedelta, timezone
from typing import List
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import LabeledPrice, PreCheckoutQuery, BotCommand
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from database import get_db, User, ProxyConfig, Payment, ProxyServer
from config import settings
from mtg_proxy import mtg_proxy_manager, mtg_monitor
import secrets
import string

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

bot = Bot(token=settings.bot_token)
dp = Dispatcher()


async def setup_bot_commands():
    """Setup bot commands for autocompletion"""
    commands = [
        BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="help", description="‚ùì –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"),
        BotCommand(command="config", description="‚öôÔ∏è –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏"),
        BotCommand(command="status", description="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏")
    ]
    
    # Set commands for autocompletion
    await bot.set_my_commands(commands)
    
    # Set menu button to help users discover commands
    from aiogram.types import MenuButtonCommands
    await bot.set_chat_menu_button(menu_button=MenuButtonCommands())
    
    logger.info("Bot commands and menu button set up successfully")


def generate_proxy_secret() -> str:
    """Generate a random proxy secret"""
    return ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(32))


def is_admin(user_id: int) -> bool:
    """Check if user is an admin"""
    try:
        admin_ids = settings.get_admin_ids()
        logger.debug(f"Checking admin access for user {user_id}. Admin IDs: {admin_ids}")
        return user_id in admin_ids
    except Exception as e:
        logger.error(f"Error checking admin access: {e}")
        return False


def admin_required(func):
    """Decorator to require admin access"""
    async def wrapper(message_or_query, **kwargs):
        user_id = message_or_query.from_user.id
        if not is_admin(user_id):
            if isinstance(message_or_query, CallbackQuery):
                await message_or_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
            else:
                await message_or_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        return await func(message_or_query, **kwargs)
    return wrapper


async def get_user_by_telegram_id(session: AsyncSession, telegram_id: int) -> User:
    """Get user by Telegram ID, create if not exists"""
    result = await session.execute(select(User).where(User.telegram_id == telegram_id))
    user = result.scalar_one_or_none()
    
    if not user:
        user = User(telegram_id=telegram_id)
        session.add(user)
        await session.commit()
        await session.refresh(user)
    
    return user


async def is_user_subscribed(user: User) -> bool:
    """Check if user has active subscription"""
    if not user.subscription_until:
        return False
    
    # Handle both timezone-aware and timezone-naive datetimes
    current_time = datetime.now(timezone.utc)
    if user.subscription_until.tzinfo is None:
        # If the stored datetime is naive, treat it as UTC
        subscription_time = user.subscription_until.replace(tzinfo=timezone.utc)
    else:
        subscription_time = user.subscription_until
    
    return current_time < subscription_time


def get_subscription_keyboard() -> InlineKeyboardMarkup:
    """Get subscription keyboard"""
    price_text = f"{settings.subscription_price:.0f} {settings.currency}" if settings.currency == "RUB" else f"${settings.subscription_price}"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∑–∞ {price_text}", callback_data="subscribe")],
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="free_trial")]
    ])
    return keyboard


def get_proxy_config_text(server_host: str = None) -> str:
    """Generate proxy configuration text using MTG proxy manager"""
    try:
        # Get MTG proxy configuration
        config_text = mtg_proxy_manager.get_proxy_config_text(server_host)
        
        return f"{config_text}"
    except Exception as e:
        logger.error(f"Error generating proxy config: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


@dp.message(CommandStart())
async def start_command(message: Message):
    """Handle /start command"""
    async for session in get_db():
        user = await get_user_by_telegram_id(session, message.from_user.id)
        user.username = message.from_user.username
        user.first_name = message.from_user.first_name
        await session.commit()
        
        if await is_user_subscribed(user):
            expiration_date = user.subscription_until.strftime('%Y-%m-%d %H:%M UTC')
            await message.answer(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! üéâ\n\n"
                f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {expiration_date}\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /config –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏", callback_data="get_config")],
                    [InlineKeyboardButton(text=f"–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (+{settings.subscription_price:.0f} {settings.currency})", callback_data="subscribe")]
                ])
            )
        else:
            await message.answer(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram Proxy Bot, {user.first_name}! üöÄ\n\n"
                "–ü–æ–ª—É—á–∏—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ Telegram —á–µ—Ä–µ–∑ –Ω–∞—à–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—ã.\n\n"
                f"üí∞ –ü–æ–¥–ø–∏—Å–∫–∞: {settings.subscription_price:.0f} {settings.currency}/{settings.subscription_duration} –¥–Ω–µ–π\n"
                "üîí –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª MTProto –ø—Ä–æ–∫—Å–∏\n"
                "üåç –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏—è—Ö\n"
                "‚ö° –í—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:",
                reply_markup=get_subscription_keyboard()
            )


@dp.message(Command("help"))
async def help_command(message: Message):
    """Handle /help command"""
    help_text = (
        "ü§ñ **–ö–æ–º–∞–Ω–¥—ã Telegram Proxy Bot**\n\n"
        "üí° **–°–æ–≤–µ—Ç:** –ù–∞–±–µ—Ä–∏—Ç–µ `/` —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã!\n\n"
        "**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "üöÄ `/start` - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚öôÔ∏è `/config` - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏\n"
        "üìä `/status` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "‚ùì `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–ø—Ä–∞–≤–∫–æ–π\n\n"
        "üîó **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
        "‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª MTProto –ø—Ä–æ–∫—Å–∏\n"
        "‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏—è—Ö\n"
        "‚Ä¢ –í—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n"
        "‚Ä¢ 30-–¥–Ω–µ–≤–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"‚Ä¢ –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {settings.subscription_price:.0f} {settings.currency}\n\n"
        "üí° **–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫–∏ tg:// –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "‚Ä¢ –û–±–Ω–æ–≤–ª—è–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ª—É—á—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    )
    
    async for session in get_db():
        user = await get_user_by_telegram_id(session, message.from_user.id)
        
        # Add admin commands section for admin users
        if is_admin(message.from_user.id):
            admin_help = (
                "\n\nüîê **–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n"
                "‚Ä¢ `/admin` - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                "‚Ä¢ `/admin_servers` - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞–º–∏\n"
                "‚Ä¢ `/admin_stats` - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞\n"
                "‚Ä¢ `/admin_users` - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
                "‚Ä¢ `/admin_payments` - –û–±–∑–æ—Ä –ø–ª–∞—Ç–µ–∂–µ–π"
            )
            help_text += admin_help
        
        if await is_user_subscribed(user):
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏", callback_data="get_config")],
                [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="check_status")]
            ])
        else:
            keyboard = get_subscription_keyboard()
        
        await message.answer(help_text, parse_mode="Markdown", reply_markup=keyboard)


@dp.message(Command("status"))
async def status_command(message: Message):
    """Handle /status command - check subscription status"""
    async for session in get_db():
        user = await get_user_by_telegram_id(session, message.from_user.id)
        
        if await is_user_subscribed(user):
            expiration_date = user.subscription_until.strftime('%Y-%m-%d %H:%M UTC')
            
            # Handle timezone-aware calculation
            current_time = datetime.now(timezone.utc)
            if user.subscription_until.tzinfo is None:
                subscription_time = user.subscription_until.replace(tzinfo=timezone.utc)
            else:
                subscription_time = user.subscription_until
            
            time_left = subscription_time - current_time
            days_left = time_left.days
            hours_left = time_left.seconds // 3600
            
            await message.answer(
                f"üìä **–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏**\n\n"
                f"‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞\n"
                f"üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expiration_date}\n"
                f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {days_left} –¥–Ω–µ–π, {hours_left} —á–∞—Å–æ–≤\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /config –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏", callback_data="get_config")],
                    [InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")]
                ])
            )
        else:
            if user.subscription_until:
                await message.answer(
                    f"üìä **–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏**\n\n"
                    f"‚ùå –°—Ç–∞—Ç—É—Å: –ò—Å—Ç–µ–∫–ª–∞\n"
                    f"üìÖ –ò—Å—Ç–µ–∫–ª–∞: {user.subscription_until.strftime('%Y-%m-%d %H:%M UTC')}\n\n"
                    "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞–º.",
                    parse_mode="Markdown",
                    reply_markup=get_subscription_keyboard()
                )
            else:
                await message.answer(
                    f"üìä **–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏**\n\n"
                    f"‚ùå –°—Ç–∞—Ç—É—Å: –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
                    "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞–º.",
                    parse_mode="Markdown",
                    reply_markup=get_subscription_keyboard()
                )


@dp.message(Command("config"))
async def config_command(message: Message):
    """Handle /config command"""
    async for session in get_db():
        user = await get_user_by_telegram_id(session, message.from_user.id)
        
        if not await is_user_subscribed(user):
            if user.subscription_until:
                expired_date = user.subscription_until.strftime('%Y-%m-%d %H:%M UTC')
                await message.answer(
                    f"‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ {expired_date}\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º –ø—Ä–æ–∫—Å–∏.",
                    reply_markup=get_subscription_keyboard()
                )
            else:
                await message.answer(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º –ø—Ä–æ–∫—Å–∏.",
                    reply_markup=get_subscription_keyboard()
                )
            return
        
        # Get proxy servers from settings and use the first one as default
        proxy_servers = settings.get_proxy_servers()
        server_host = proxy_servers[0].split(':')[0] if proxy_servers else None
        
        config_text = get_proxy_config_text(server_host)
        
        # Get Telegram proxy URL for the button
        telegram_proxy_url = mtg_proxy_manager.get_telegram_proxy_url(server_host)
        
        await message.answer(
            config_text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì± –û—Ç–∫—Ä—ã—Ç—å –≤ Telegram", url=telegram_proxy_url)],
                [InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="refresh_config")],
                [InlineKeyboardButton(text="–°—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏", callback_data="proxy_status")]
            ])
        )


@dp.callback_query(lambda c: c.data == "subscribe")
async def subscribe_callback(callback_query: CallbackQuery):
    """Handle subscription callback"""
    try:
        prices = [LabeledPrice(label="Subscription", amount=int(settings.subscription_price * 100))]
        
        await bot.send_invoice(
            chat_id=callback_query.from_user.id,
            title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Telegram Proxy",
            description=f"–ü–æ–ª—É—á–∏—Ç–µ {settings.subscription_duration} –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–µ–º–∏—É–º –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞–º",
            provider_token=settings.payment_provider_token,
            currency=settings.currency,
            prices=prices,
            payload=f"subscription_{callback_query.from_user.id}"
        )
        
        await callback_query.answer("–°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø–ª–∞—Ç—ë–∂.")
        
    except Exception as e:
        logger.error(f"Error sending invoice: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@dp.callback_query(lambda c: c.data == "free_trial")
async def free_trial_callback(callback_query: CallbackQuery):
    """Handle free trial callback"""
    async for session in get_db():
        user = await get_user_by_telegram_id(session, callback_query.from_user.id)
        
        if await is_user_subscribed(user):
            await callback_query.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!", show_alert=True)
            return
        
        # Check if user already had a trial (US-002: cannot get multiple free trials)
        if user.subscription_until:
            await callback_query.answer("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", show_alert=True)
            return
        
        # Give 30 day free trial
        user.subscription_until = datetime.now(timezone.utc) + timedelta(days=30)
        await session.commit()
        
        expiration_time = user.subscription_until.strftime('%Y-%m-%d %H:%M UTC')
        await callback_query.message.edit_text(
            "üéâ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
            f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å 30 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –¥–æ {expiration_time}.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /config –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏", callback_data="get_config")]
            ])
        )
    
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == "get_config")
async def get_config_callback(callback_query: CallbackQuery):
    """Handle get config callback"""
    try:
        # Create a modified message object with the correct user info
        message = callback_query.message
        message.from_user = callback_query.from_user
        await config_command(message)
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error in get_config_callback: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", show_alert=True)


@dp.callback_query(lambda c: c.data == "check_status")
async def check_status_callback(callback_query: CallbackQuery):
    """Handle check status callback"""
    try:
        message = callback_query.message
        message.from_user = callback_query.from_user
        await status_command(message)
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error in check_status_callback: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)


@dp.callback_query(lambda c: c.data == "refresh_config")
async def refresh_config_callback(callback_query: CallbackQuery):
    """Handle refresh config callback"""
    async for session in get_db():
        user = await get_user_by_telegram_id(session, callback_query.from_user.id)
        
        if not await is_user_subscribed(user):
            await callback_query.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!", show_alert=True)
            return
        
        # Get proxy servers from settings and use the first one as default
        proxy_servers = settings.get_proxy_servers()
        server_host = proxy_servers[0].split(':')[0] if proxy_servers else None
        
        config_text = get_proxy_config_text(server_host)
        
        # Get Telegram proxy URL for the button
        telegram_proxy_url = mtg_proxy_manager.get_telegram_proxy_url(server_host)
        
        # Check if message content would be the same to avoid TelegramBadRequest
        current_text = callback_query.message.text or ""
        if current_text != config_text:
            await callback_query.message.edit_text(
                config_text,
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üì± –û—Ç–∫—Ä—ã—Ç—å –≤ Telegram", url=telegram_proxy_url)],
                    [InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="refresh_config")],
                    [InlineKeyboardButton(text="–°—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏", callback_data="proxy_status")]
                ])
            )
        else:
            # Message content is the same, just answer the callback
            await callback_query.answer("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            return
    
    await callback_query.answer("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")


@dp.callback_query(lambda c: c.data == "proxy_status")
async def proxy_status_callback(callback_query: CallbackQuery):
    """Handle proxy status callback"""
    async for session in get_db():
        user = await get_user_by_telegram_id(session, callback_query.from_user.id)
        
        if not await is_user_subscribed(user):
            await callback_query.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!", show_alert=True)
            return
        
        # Get detailed status information
        status_text = mtg_monitor.get_status_text()
        
        # Check proxy health
        health_status = await mtg_monitor.health_check()
        health_emoji = "‚úÖ" if health_status else "‚ùå"
        health_text = "–†–∞–±–æ—Ç–∞–µ—Ç" if health_status else "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        
        full_status = f"{status_text}\n\nüè• **–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:** {health_emoji} {health_text}"
        
        # Check if message content would be the same to avoid TelegramBadRequest
        current_text = callback_query.message.text or ""
        if current_text != full_status:
            await callback_query.message.edit_text(
                full_status,
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="proxy_status")],
                    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", callback_data="get_config")]
                ])
            )
        else:
            # Message content is the same, just answer the callback
            await callback_query.answer("–°—Ç–∞—Ç—É—Å —É–∂–µ –æ–±–Ω–æ–≤–ª—ë–Ω!")
            return
    
    await callback_query.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω!")


@dp.pre_checkout_query()
async def pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    """Handle pre-checkout query"""
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message(lambda message: message.successful_payment)
async def successful_payment(message: Message):
    """Handle successful payment"""
    async for session in get_db():
        user = await get_user_by_telegram_id(session, message.from_user.id)
        
        # Record payment
        payment = Payment(
            user_id=user.id,
            amount=message.successful_payment.total_amount / 100,
            currency=message.successful_payment.currency,
            status="completed",
            provider_payment_id=message.successful_payment.provider_payment_charge_id
        )
        session.add(payment)
        
        # Extend subscription
        current_time = datetime.now(timezone.utc)
        if user.subscription_until:
            # Handle timezone-aware comparison
            if user.subscription_until.tzinfo is None:
                subscription_time = user.subscription_until.replace(tzinfo=timezone.utc)
            else:
                subscription_time = user.subscription_until
                
            if subscription_time > current_time:
                # Extend existing subscription
                user.subscription_until = subscription_time + timedelta(days=settings.subscription_duration)
            else:
                # Start new subscription
                user.subscription_until = current_time + timedelta(days=settings.subscription_duration)
        else:
            # First subscription
            user.subscription_until = current_time + timedelta(days=settings.subscription_duration)
        
        await session.commit()
        
        await message.answer(
            f"‚úÖ –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n"
            f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {user.subscription_until.strftime('%Y-%m-%d %H:%M')} UTC\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /config –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏", callback_data="get_config")]
            ])
        )


# ====== ADMIN COMMANDS ======

@dp.message(Command("admin"))
@admin_required
async def admin_command(message: Message):
    """Admin panel main menu"""
    admin_text = (
        "üîê **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
        "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "`/admin_servers` - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞–º–∏\n"
        "`/admin_stats` - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞\n"
        "`/admin_users` - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
        "`/admin_payments` - –û–±–∑–æ—Ä –ø–ª–∞—Ç–µ–∂–µ–π\n\n"
        "**–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä—ã\n"
        "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—á—ë—Ç–æ–≤ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üñ•Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏", callback_data="admin_servers")],
        [InlineKeyboardButton(text="üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users")],
        [InlineKeyboardButton(text="üí∞ –û—Ç—á—ë—Ç—ã –æ –ø–ª–∞—Ç–µ–∂–∞—Ö", callback_data="admin_payments")]
    ])
    
    await message.answer(admin_text, parse_mode="Markdown", reply_markup=keyboard)


@dp.message(Command("admin_servers"))
@admin_required
async def admin_servers_command(message: Message):
    """Manage proxy servers"""
    async for session in get_db():
        # Get all servers from database
        result = await session.execute(select(ProxyServer))
        servers = result.scalars().all()
        
        if not servers:
            # Initialize servers from config if database is empty
            config_servers = settings.get_proxy_servers()
            for server_str in config_servers:
                if ':' in server_str:
                    address, port = server_str.split(':', 1)
                    port = int(port)
                else:
                    address = server_str
                    port = 443
                
                server = ProxyServer(
                    address=address,
                    port=port,
                    is_active=True,
                    description=f"Server {address}"
                )
                session.add(server)
            
            await session.commit()
            # Re-fetch servers
            result = await session.execute(select(ProxyServer))
            servers = result.scalars().all()
        
        # Build servers list
        servers_text = "üñ•Ô∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞–º–∏**\n\n"
        if servers:
            for i, server in enumerate(servers, 1):
                status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if server.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                servers_text += f"**–°–µ—Ä–≤–µ—Ä {i}:**\n"
                servers_text += f"–ê–¥—Ä–µ—Å: `{server.address}:{server.port}`\n"
                servers_text += f"–°—Ç–∞—Ç—É—Å: {status}\n"
                servers_text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {server.description or '–ù/–î'}\n"
                servers_text += f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {server.location or '–ù/–î'}\n"
                servers_text += f"–ú–∞–∫—Å. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {server.max_users}\n\n"
        else:
            servers_text += "–°–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.\n\n"
        
        servers_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞–º–∏:"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="admin_add_server")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="admin_remove_server")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="admin_config_server")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="admin_refresh_servers")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="admin_main")]
        ])
        
        await message.answer(servers_text, parse_mode="Markdown", reply_markup=keyboard)


@dp.message(Command("admin_stats"))
@admin_required
async def admin_stats_command(message: Message):
    """View bot statistics"""
    async for session in get_db():
        # Get user statistics
        total_users_result = await session.execute(select(User))
        total_users = len(total_users_result.scalars().all())
        
        active_users_result = await session.execute(
            select(User).where(User.subscription_until > datetime.now(timezone.utc))
        )
        active_subscribers = len(active_users_result.scalars().all())
        
        # Get payment statistics
        payments_result = await session.execute(
            select(Payment).where(Payment.status == "completed")
        )
        completed_payments = payments_result.scalars().all()
        total_revenue = sum(p.amount for p in completed_payments)
        
        # Get server statistics
        servers_result = await session.execute(select(ProxyServer))
        all_servers = servers_result.scalars().all()
        active_servers = [s for s in all_servers if s.is_active]
        
        # Get proxy config statistics
        configs_result = await session.execute(select(ProxyConfig))
        total_configs = len(configs_result.scalars().all())
        
        stats_text = (
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
            f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {active_subscribers}\n"
            f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏: {(active_subscribers/total_users*100) if total_users > 0 else 0:.1f}%\n\n"
            f"**–î–æ—Ö–æ–¥—ã:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {len(completed_payments)}\n"
            f"‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${total_revenue:.2f}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø–ª–∞—Ç—ë–∂: ${(total_revenue/len(completed_payments)) if completed_payments else 0:.2f}\n\n"
            f"**–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(all_servers)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(active_servers)}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø—Ä–æ–∫—Å–∏: {total_configs}\n"
            f"‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {(total_configs/active_subscribers) if active_subscribers > 0 else 0:.1f}\n\n"
            f"**–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤:**\n"
        )
        
        for server in all_servers:
            status = "üü¢" if server.is_active else "üî¥"
            stats_text += f"{status} {server.address}:{server.port}\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="admin_refresh_stats")],
            [InlineKeyboardButton(text="üìà –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç", callback_data="admin_detailed_stats")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="admin_main")]
        ])
        
        await message.answer(stats_text, parse_mode="Markdown", reply_markup=keyboard)


@dp.message(Command("admin_users"))
@admin_required
async def admin_users_command(message: Message):
    """User management panel"""
    async for session in get_db():
        # Get recent users
        result = await session.execute(
            select(User).order_by(User.created_at.desc()).limit(10)
        )
        recent_users = result.scalars().all()
        
        users_text = "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**\n\n"
        users_text += "**–ù–µ–¥–∞–≤–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):**\n\n"
        
        for user in recent_users:
            subscription_status = "‚úÖ" if await is_user_subscribed(user) else "‚ùå"
            username = user.username or "–ù/–î"
            users_text += f"ID: {user.telegram_id}\n"
            users_text += f"–ò–º—è: {user.first_name} (@{username})\n"
            users_text += f"–ü–æ–¥–ø–∏—Å–∞–Ω: {subscription_status}\n"
            if user.subscription_until:
                users_text += f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {user.subscription_until.strftime('%Y-%m-%d %H:%M')}\n"
            users_text += f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {user.created_at.strftime('%Y-%m-%d')}\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user")],
            [InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_block_user")],
            [InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_unblock_user")],
            [InlineKeyboardButton(text="üéÅ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_grant_sub")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="admin_main")]
        ])
        
        await message.answer(users_text, parse_mode="Markdown", reply_markup=keyboard)


@dp.message(Command("admin_payments"))
@admin_required
async def admin_payments_command(message: Message):
    """Payment reports and management"""
    async for session in get_db():
        # Get recent payments
        result = await session.execute(
            select(Payment).order_by(Payment.created_at.desc()).limit(10)
        )
        recent_payments = result.scalars().all()
        
        # Get payment summary
        completed_result = await session.execute(
            select(Payment).where(Payment.status == "completed")
        )
        completed_payments = completed_result.scalars().all()
        
        pending_result = await session.execute(
            select(Payment).where(Payment.status == "pending")
        )
        pending_payments = pending_result.scalars().all()
        
        total_revenue = sum(p.amount for p in completed_payments)
        pending_amount = sum(p.amount for p in pending_payments)
        
        payments_text = (
            "üí∞ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏**\n\n"
            f"**–°–≤–æ–¥–∫–∞:**\n"
            f"‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${total_revenue:.2f}\n"
            f"‚Ä¢ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏: {len(completed_payments)}\n"
            f"‚Ä¢ –û–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏: {len(pending_payments)} (${pending_amount:.2f})\n\n"
            f"**–ù–µ–¥–∞–≤–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:**\n\n"
        )
        
        for payment in recent_payments:
            status_emoji = "‚úÖ" if payment.status == "completed" else "‚è≥"
            payments_text += f"{status_emoji} ${payment.amount:.2f} {payment.currency}\n"
            payments_text += f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {payment.user_id}\n"
            payments_text += f"–î–∞—Ç–∞: {payment.created_at.strftime('%Y-%m-%d %H:%M')}\n"
            payments_text += f"ID –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {payment.provider_payment_id or '–ù/–î'}\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="admin_payment_analytics")],
            [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ø–ª–∞—Ç—ë–∂", callback_data="admin_search_payment")],
            [InlineKeyboardButton(text="üí∏ –í–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞", callback_data="admin_refund_payment")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="admin_main")]
        ])
        
        await message.answer(payments_text, parse_mode="Markdown", reply_markup=keyboard)


# ====== ADMIN CALLBACK HANDLERS ======

@dp.callback_query(lambda c: c.data == "admin_servers")
@admin_required
async def admin_servers_callback(callback_query: CallbackQuery):
    """Handle admin servers callback"""
    await admin_servers_command(callback_query.message)
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == "admin_stats")
@admin_required
async def admin_stats_callback(callback_query: CallbackQuery):
    """Handle admin stats callback"""
    await admin_stats_command(callback_query.message)
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == "admin_users")
@admin_required
async def admin_users_callback(callback_query: CallbackQuery):
    """Handle admin users callback"""
    await admin_users_command(callback_query.message)
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == "admin_payments")
@admin_required
async def admin_payments_callback(callback_query: CallbackQuery):
    """Handle admin payments callback"""
    await admin_payments_command(callback_query.message)
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == "admin_main")
@admin_required
async def admin_main_callback(callback_query: CallbackQuery):
    """Handle return to admin main menu"""
    await admin_command(callback_query.message)
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == "admin_add_server")
@admin_required
async def admin_add_server_callback(callback_query: CallbackQuery):
    """Handle add server callback"""
    await callback_query.message.edit_text(
        "üñ•Ô∏è **–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä**\n\n"
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "**server_add <–∞–¥—Ä–µ—Å> <–ø–æ—Ä—Ç> [–æ–ø–∏—Å–∞–Ω–∏–µ]**\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ `server_add proxy.example.com 443 –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä`\n"
        "‚Ä¢ `server_add 192.168.1.100 8080 –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä`\n\n"
        "–°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º", callback_data="admin_servers")]
        ])
    )
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == "admin_remove_server")
@admin_required
async def admin_remove_server_callback(callback_query: CallbackQuery):
    """Handle remove server callback"""
    async for session in get_db():
        result = await session.execute(select(ProxyServer).where(ProxyServer.is_active == True))
        active_servers = result.scalars().all()
        
        if not active_servers:
            await callback_query.message.edit_text(
                "üñ•Ô∏è **–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä**\n\n"
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º", callback_data="admin_servers")]
                ])
            )
            await callback_query.answer()
            return
        
        keyboard_buttons = []
        for server in active_servers:
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {server.address}:{server.port}",
                    callback_data=f"admin_remove_server_{server.id}"
                )
            ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô Back to Servers", callback_data="admin_servers")
        ])
        
        await callback_query.message.edit_text(
            "üñ•Ô∏è **–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä**\n\n"
            "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–∫–ª—é—á–∏—Ç –µ–≥–æ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        )
    
    await callback_query.answer()


@dp.callback_query(lambda c: c.data.startswith("admin_remove_server_"))
@admin_required
async def admin_remove_server_confirm_callback(callback_query: CallbackQuery):
    """Handle server removal confirmation"""
    server_id = int(callback_query.data.split("_")[-1])
    
    async for session in get_db():
        result = await session.execute(select(ProxyServer).where(ProxyServer.id == server_id))
        server = result.scalar_one_or_none()
        
        if not server:
            await callback_query.answer("–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        # Deactivate server instead of deleting
        server.is_active = False
        await session.commit()
        
        await callback_query.message.edit_text(
            f"‚úÖ **–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω**\n\n"
            f"–°–µ—Ä–≤–µ—Ä `{server.address}:{server.port}` –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º", callback_data="admin_servers")]
            ])
        )
    
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == "admin_config_server")
@admin_required
async def admin_config_server_callback(callback_query: CallbackQuery):
    """Handle server configuration callback"""
    async for session in get_db():
        result = await session.execute(select(ProxyServer))
        servers = result.scalars().all()
        
        if not servers:
            await callback_query.message.edit_text(
                "üñ•Ô∏è **Configure Proxy Server**\n\n"
                "‚ùå No servers to configure.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô Back to Servers", callback_data="admin_servers")]
                ])
            )
            await callback_query.answer()
            return
        
        keyboard_buttons = []
        for server in servers:
            status = "‚úÖ" if server.is_active else "‚ùå"
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"{status} Config {server.address}:{server.port}",
                    callback_data=f"admin_config_server_{server.id}"
                )
            ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô Back to Servers", callback_data="admin_servers")
        ])
        
        await callback_query.message.edit_text(
            "üñ•Ô∏è **Configure Proxy Server**\n\n"
            "Select a server to configure:",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        )
    
    await callback_query.answer()


@dp.callback_query(lambda c: c.data.startswith("admin_config_server_"))
@admin_required
async def admin_config_server_detail_callback(callback_query: CallbackQuery):
    """Handle individual server configuration"""
    server_id = int(callback_query.data.split("_")[-1])
    
    async for session in get_db():
        result = await session.execute(select(ProxyServer).where(ProxyServer.id == server_id))
        server = result.scalar_one_or_none()
        
        if not server:
            await callback_query.answer("–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        status = "‚úÖ Active" if server.is_active else "‚ùå Inactive"
        config_text = (
            f"‚öôÔ∏è **Server Configuration**\n\n"
            f"**Address:** `{server.address}:{server.port}`\n"
            f"**Status:** {status}\n"
            f"**Description:** {server.description or 'N/A'}\n"
            f"**Location:** {server.location or 'N/A'}\n"
            f"**Max Users:** {server.max_users}\n"
            f"**Created:** {server.created_at.strftime('%Y-%m-%d %H:%M')}\n"
            f"**Updated:** {server.updated_at.strftime('%Y-%m-%d %H:%M')}\n\n"
            f"Use the buttons below to modify this server:"
        )
        
        toggle_text = "üî¥ Deactivate" if server.is_active else "üü¢ Activate"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=toggle_text, callback_data=f"admin_toggle_server_{server.id}")],
            [InlineKeyboardButton(text="üìù Edit Description", callback_data=f"admin_edit_server_{server.id}")],
            [InlineKeyboardButton(text="üîô Back to Config", callback_data="admin_config_server")]
        ])
        
        await callback_query.message.edit_text(
            config_text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    
    await callback_query.answer()


@dp.callback_query(lambda c: c.data.startswith("admin_toggle_server_"))
@admin_required
async def admin_toggle_server_callback(callback_query: CallbackQuery):
    """Handle server activation/deactivation toggle"""
    server_id = int(callback_query.data.split("_")[-1])
    
    async for session in get_db():
        result = await session.execute(select(ProxyServer).where(ProxyServer.id == server_id))
        server = result.scalar_one_or_none()
        
        if not server:
            await callback_query.answer("–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        # Toggle server status
        server.is_active = not server.is_active
        server.updated_at = datetime.now(timezone.utc)
        await session.commit()
        
        status = "activated" if server.is_active else "deactivated"
        await callback_query.answer(f"Server {status} successfully!")
        
        # Refresh the configuration view
        await admin_config_server_detail_callback(callback_query)


@dp.callback_query(lambda c: c.data == "admin_refresh_servers")
@admin_required
async def admin_refresh_servers_callback(callback_query: CallbackQuery):
    """Handle refresh servers list callback"""
    await admin_servers_command(callback_query.message)
    await callback_query.answer("Servers list refreshed!")


@dp.callback_query(lambda c: c.data == "admin_refresh_stats")
@admin_required
async def admin_refresh_stats_callback(callback_query: CallbackQuery):
    """Handle refresh stats callback"""
    await admin_stats_command(callback_query.message)
    await callback_query.answer("Statistics refreshed!")


@dp.callback_query(lambda c: c.data == "admin_grant_sub")
@admin_required
async def admin_grant_sub_callback(callback_query: CallbackQuery):
    """Handle grant subscription callback"""
    await callback_query.message.edit_text(
        "üéÅ **Grant Subscription**\n\n"
        "To grant a subscription to a user, send a message in this format:\n"
        "**grant_sub <user_id> <days>**\n\n"
        "Examples:\n"
        "‚Ä¢ `grant_sub 123456789 30` - Grant 30 days\n"
        "‚Ä¢ `grant_sub 987654321 7` - Grant 7 days\n\n"
        "The subscription will be added to the user's account.",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô Back to Users", callback_data="admin_users")]
        ])
    )
    await callback_query.answer()


# ====== ADMIN COMMAND HANDLERS ======

@dp.message(lambda message: message.text and message.text.startswith("server_add "))
@admin_required
async def handle_server_add_command(message: Message):
    """Handle server_add command"""
    try:
        parts = message.text.split(" ", 3)
        if len(parts) < 3:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `server_add <–∞–¥—Ä–µ—Å> <–ø–æ—Ä—Ç> [–æ–ø–∏—Å–∞–Ω–∏–µ]`",
                parse_mode="Markdown"
            )
            return
        
        address = parts[1]
        port = int(parts[2])
        description = parts[3] if len(parts) > 3 else f"Server {address}"
        
        async for session in get_db():
            # Check if server already exists
            result = await session.execute(
                select(ProxyServer).where(ProxyServer.address == address)
            )
            existing_server = result.scalar_one_or_none()
            
            if existing_server:
                await message.answer(
                    f"‚ùå –°–µ—Ä–≤–µ—Ä `{address}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                    parse_mode="Markdown"
                )
                return
            
            # Create new server
            server = ProxyServer(
                address=address,
                port=port,
                description=description,
                is_active=True
            )
            session.add(server)
            await session.commit()
            
            await message.answer(
                f"‚úÖ **–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω**\n\n"
                f"–ê–¥—Ä–µ—Å: `{address}:{port}`\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                f"–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n\n"
                f"–°–µ—Ä–≤–µ—Ä —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.",
                parse_mode="Markdown"
            )
    
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"Error adding server: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="Markdown"
        )


@dp.message(lambda message: message.text and message.text.startswith("grant_sub "))
@admin_required
async def handle_grant_sub_command(message: Message):
    """Handle grant_sub command"""
    try:
        parts = message.text.split(" ")
        if len(parts) != 3:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `grant_sub <user_id> <–¥–Ω–∏>`",
                parse_mode="Markdown"
            )
            return
        
        user_id = int(parts[1])
        days = int(parts[2])
        
        if days <= 0:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.",
                parse_mode="Markdown"
            )
            return
        
        async for session in get_db():
            # Find user by telegram_id
            result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                await message.answer(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    parse_mode="Markdown"
                )
                return
            
            # Grant subscription
            current_time = datetime.now(timezone.utc)
            if user.subscription_until and user.subscription_until > current_time:
                # Extend existing subscription
                user.subscription_until += timedelta(days=days)
            else:
                # Create new subscription
                user.subscription_until = current_time + timedelta(days=days)
            
            await session.commit()
            
            expiry_date = user.subscription_until.strftime('%Y-%m-%d %H:%M UTC')
            await message.answer(
                f"‚úÖ **–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞**\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{user.username or '–ù/–î'})\n"
                f"Telegram ID: `{user_id}`\n"
                f"–î–æ–±–∞–≤–ª–µ–Ω–æ –¥–Ω–µ–π: {days}\n"
                f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {expiry_date}\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º –ø—Ä–æ–∫—Å–∏.",
                parse_mode="Markdown"
            )
    
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞.",
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"Error granting subscription: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="Markdown"
        )


# ====== MISSING ADMIN HANDLERS ======

@dp.callback_query(lambda c: c.data == "admin_detailed_stats")
@admin_required
async def admin_detailed_stats_callback(callback_query: CallbackQuery):
    """Handle detailed stats callback"""
    async for session in get_db():
        try:
            # Get detailed statistics
            total_users_result = await session.execute(select(User))
            all_users = total_users_result.scalars().all()
            
            active_users_result = await session.execute(
                select(User).where(User.subscription_until > datetime.now(timezone.utc))
            )
            active_users = active_users_result.scalars().all()
            
            payments_result = await session.execute(
                select(Payment).where(Payment.status == "completed")
            )
            payments = payments_result.scalars().all()
            
            # Calculate detailed metrics
            total_users = len(all_users)
            active_subscribers = len(active_users)
            total_revenue = sum(p.amount for p in payments)
            
            # Get user statistics by creation date
            recent_users = [u for u in all_users if u.created_at > datetime.now(timezone.utc) - timedelta(days=7)]
            
            # Get payment statistics
            recent_payments = [p for p in payments if p.created_at > datetime.now(timezone.utc) - timedelta(days=7)]
            
            detailed_text = (
                f"üìà **–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
                f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {active_subscribers}\n"
                f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {len(recent_users)}\n"
                f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {(active_subscribers/total_users*100) if total_users > 0 else 0:.1f}%\n\n"
                f"**–î–æ—Ö–æ–¥—ã:**\n"
                f"‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${total_revenue:.2f}\n"
                f"‚Ä¢ –î–æ—Ö–æ–¥ –∑–∞ –Ω–µ–¥–µ–ª—é: ${sum(p.amount for p in recent_payments):.2f}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø–ª–∞—Ç—ë–∂: ${(total_revenue/len(payments)) if payments else 0:.2f}\n"
                f"‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: {len(recent_payments)}\n\n"
                f"**–¢—Ä–µ–Ω–¥—ã:**\n"
                f"‚Ä¢ –†–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {(len(recent_users)/7):.1f} –≤ –¥–µ–Ω—å\n"
                f"‚Ä¢ –†–æ—Å—Ç –¥–æ—Ö–æ–¥–æ–≤: ${(sum(p.amount for p in recent_payments)/7):.2f} –≤ –¥–µ–Ω—å\n"
            )
            
            await callback_query.message.edit_text(
                detailed_text,
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_detailed_stats")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_stats")]
                ])
            )
        except Exception as e:
            logger.error(f"Error in detailed stats: {e}")
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)
    
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == "admin_search_user")
@admin_required
async def admin_search_user_callback(callback_query: CallbackQuery):
    """Handle search user callback"""
    await callback_query.message.edit_text(
        "üîç **–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        "–î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "**search_user <user_id>**\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ `search_user 123456789`\n\n"
        "–ë—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ –ø–æ–¥–ø–∏—Å–∫–µ.",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="admin_users")]
        ])
    )
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == "admin_block_user")
@admin_required
async def admin_block_user_callback(callback_query: CallbackQuery):
    """Handle block user callback"""
    await callback_query.message.edit_text(
        "üö´ **–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        "–î–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "**block_user <user_id>**\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ `block_user 123456789`\n\n"
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ —Å–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="admin_users")]
        ])
    )
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == "admin_unblock_user")
@admin_required
async def admin_unblock_user_callback(callback_query: CallbackQuery):
    """Handle unblock user callback"""
    await callback_query.message.edit_text(
        "‚úÖ **–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        "–î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "**unblock_user <user_id>**\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ `unblock_user 123456789`\n\n"
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ —Å–º–æ–∂–µ—Ç —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="admin_users")]
        ])
    )
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == "admin_payment_analytics")
@admin_required
async def admin_payment_analytics_callback(callback_query: CallbackQuery):
    """Handle payment analytics callback"""
    async for session in get_db():
        try:
            # Get payment analytics
            payments_result = await session.execute(
                select(Payment).where(Payment.status == "completed")
            )
            payments = payments_result.scalars().all()
            
            if not payments:
                await callback_query.message.edit_text(
                    "üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π**\n\n"
                    "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö.",
                    parse_mode="Markdown",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–ª–∞—Ç–µ–∂–∞–º", callback_data="admin_payments")]
                    ])
                )
                await callback_query.answer()
                return
            
            # Calculate analytics
            total_revenue = sum(p.amount for p in payments)
            avg_payment = total_revenue / len(payments)
            
            # Payment by currency
            currency_stats = {}
            for payment in payments:
                currency = payment.currency
                if currency not in currency_stats:
                    currency_stats[currency] = {"count": 0, "total": 0}
                currency_stats[currency]["count"] += 1
                currency_stats[currency]["total"] += payment.amount
            
            # Recent payments (last 30 days)
            recent_payments = [p for p in payments if p.created_at > datetime.now(timezone.utc) - timedelta(days=30)]
            
            analytics_text = (
                f"üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π**\n\n"
                f"**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {len(payments)}\n"
                f"‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${total_revenue:.2f}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø–ª–∞—Ç—ë–∂: ${avg_payment:.2f}\n"
                f"‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π –∑–∞ 30 –¥–Ω–µ–π: {len(recent_payments)}\n\n"
                f"**–ü–æ –≤–∞–ª—é—Ç–∞–º:**\n"
            )
            
            for currency, stats in currency_stats.items():
                analytics_text += f"‚Ä¢ {currency}: {stats['count']} –ø–ª–∞—Ç–µ–∂–µ–π, ${stats['total']:.2f}\n"
            
            await callback_query.message.edit_text(
                analytics_text,
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_payment_analytics")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–ª–∞—Ç–µ–∂–∞–º", callback_data="admin_payments")]
                ])
            )
        except Exception as e:
            logger.error(f"Error in payment analytics: {e}")
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π", show_alert=True)
    
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == "admin_search_payment")
@admin_required
async def admin_search_payment_callback(callback_query: CallbackQuery):
    """Handle search payment callback"""
    await callback_query.message.edit_text(
        "üîç **–ü–æ–∏—Å–∫ –ø–ª–∞—Ç–µ–∂–∞**\n\n"
        "–î–ª—è –ø–æ–∏—Å–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "**search_payment <payment_id>**\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ `search_payment 123`\n\n"
        "–ë—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –∏ —Å–≤—è–∑–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–ª–∞—Ç–µ–∂–∞–º", callback_data="admin_payments")]
        ])
    )
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == "admin_refund_payment")
@admin_required
async def admin_refund_payment_callback(callback_query: CallbackQuery):
    """Handle refund payment callback"""
    await callback_query.message.edit_text(
        "üí∏ **–í–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞**\n\n"
        "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "**refund_payment <payment_id>**\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ `refund_payment 123`\n\n"
        "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –í–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç–º–µ–Ω–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–ª–∞—Ç–µ–∂–∞–º", callback_data="admin_payments")]
        ])
    )
    await callback_query.answer()


@dp.callback_query(lambda c: c.data.startswith("admin_edit_server_"))
@admin_required
async def admin_edit_server_callback(callback_query: CallbackQuery):
    """Handle edit server callback"""
    server_id = int(callback_query.data.split("_")[-1])
    
    await callback_query.message.edit_text(
        f"üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä**\n\n"
        f"–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"**edit_server {server_id} <–Ω–æ–≤–æ–µ_–æ–ø–∏—Å–∞–Ω–∏–µ>**\n\n"
        f"–ü—Ä–∏–º–µ—Ä:\n"
        f"‚Ä¢ `edit_server {server_id} –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä –°–®–ê`\n\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ.",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data=f"admin_config_server_{server_id}")]
        ])
    )
    await callback_query.answer()


# ====== FALLBACK HANDLERS ======

@dp.message(lambda message: message.text and message.text.startswith('/'))
async def handle_unknown_command(message: Message):
    """Handle unknown commands with helpful message"""
    command = message.text.split()[0]  # Get just the command part
    
    # Check if user is admin to provide appropriate command list
    user_is_admin = is_admin(message.from_user.id)
    
    unknown_command_text = (
        f"‚ùì **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: `{command}`**\n\n"
        "–Ø –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "‚Ä¢ `/start` - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\n"
        "‚Ä¢ `/config` - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏\n"
        "‚Ä¢ `/status` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏\n"
    )
    
    # Add admin commands for admin users
    if user_is_admin:
        unknown_command_text += (
            "\n**–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n"
            "‚Ä¢ `/admin` - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "‚Ä¢ `/admin_servers` - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞–º–∏\n"
            "‚Ä¢ `/admin_stats` - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞\n"
            "‚Ä¢ `/admin_users` - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
            "‚Ä¢ `/admin_payments` - –û–±–∑–æ—Ä –ø–ª–∞—Ç–µ–∂–µ–π\n"
        )
    
    unknown_command_text += "\nüí° **–°–æ–≤–µ—Ç:** –ù–∞–±–µ—Ä–∏—Ç–µ `/` —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º!"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É", callback_data="show_help")],
        [InlineKeyboardButton(text="üöÄ –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="show_start")]
    ])
    
    await message.answer(unknown_command_text, parse_mode="Markdown", reply_markup=keyboard)


@dp.callback_query(lambda c: c.data == "show_help")
async def show_help_callback(callback_query: CallbackQuery):
    """Handle show help callback from unknown command handler"""
    # Create a message object for the help command
    message = callback_query.message
    message.from_user = callback_query.from_user
    await help_command(message)
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == "show_start")
async def show_start_callback(callback_query: CallbackQuery):
    """Handle show start callback from unknown command handler"""
    # Create a message object for the start command
    message = callback_query.message
    message.from_user = callback_query.from_user
    await start_command(message)
    await callback_query.answer()


@dp.message()
async def handle_text_message(message: Message):
    """Handle any other text messages with guidance"""
    guidance_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Telegram Proxy Bot.\n\n"
        "üí° **–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:**\n"
        "‚Ä¢ –ù–∞–±–µ—Ä–∏—Ç–µ `/start` —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ –ù–∞–±–µ—Ä–∏—Ç–µ `/help` —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\n"
        "‚Ä¢ –ù–∞–±–µ—Ä–∏—Ç–µ `/` —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º\n\n"
        "üîß **–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data="show_start")],
        [InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É", callback_data="show_help")]
    ])
    
    await message.answer(guidance_text, parse_mode="Markdown", reply_markup=keyboard)