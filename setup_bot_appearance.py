#!/usr/bin/env python3
"""
Bot Appearance Setup Script
Enhances the bot's appearance for new users using aiogram
"""

import asyncio
import logging
from aiogram import Bot
from aiogram.types import BotCommand, MenuButtonCommands, BotDescription, BotShortDescription
from config import settings

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def setup_bot_appearance():
    """Enhanced bot appearance setup for new users"""
    bot = Bot(token=settings.bot_token)
    
    try:
        # 1. Set bot commands for autocompletion
        commands = [
            BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand(command="help", description="‚ùì –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"),
            BotCommand(command="config", description="‚öôÔ∏è –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏"),
            BotCommand(command="status", description="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏")
        ]
        
        await bot.set_my_commands(commands)
        logger.info("‚úÖ Bot commands set successfully")
        
        # 2. Set menu button to help users discover commands
        await bot.set_chat_menu_button(menu_button=MenuButtonCommands())
        logger.info("‚úÖ Menu button configured")
        
        # 3. Set bot description (what users see in bot profile)
        bot_description = (
            "üîê SafeSurf Telegram Proxy Bot - –í–∞—à –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫\n\n"
            "üåü –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π MTProto –ø—Ä–æ–∫—Å–∏\n"
            "‚Ä¢ –°–µ—Ä–≤–µ—Ä—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö\n"
            "‚Ä¢ 30-–¥–Ω–µ–≤–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n"
            "‚Ä¢ –ü—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n\n"
            "üí° –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞–º!"
        )
        
        await bot.set_my_description(bot_description)
        logger.info("‚úÖ Bot description set successfully")
        
        # 4. Set short description (appears in search results)
        short_description = (
            "üîê –ë—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π Telegram –ø—Ä–æ–∫—Å–∏. "
            "30 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!"
        )
        
        await bot.set_my_short_description(short_description)
        logger.info("‚úÖ Bot short description set successfully")
        
        # 5. Set bot name (optional - usually set via @BotFather)
        try:
            await bot.set_my_name("SafeSurf Telegram Proxy Bot")
            logger.info("‚úÖ Bot name set successfully")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Could not set bot name: {e}")
        
        # 6. Get and display current bot info
        me = await bot.get_me()
        logger.info(f"ü§ñ Bot info: @{me.username} ({me.first_name})")
        
        # 7. Display current settings
        commands_list = await bot.get_my_commands()
        logger.info(f"üìã Configured commands: {len(commands_list)}")
        for cmd in commands_list:
            logger.info(f"   /{cmd.command} - {cmd.description}")
        
        # 8. Get current description
        current_description = await bot.get_my_description()
        logger.info(f"üìù Current description: {current_description.description[:100]}...")
        
        # 9. Get current short description
        current_short_description = await bot.get_my_short_description()
        logger.info(f"üìÑ Current short description: {current_short_description.short_description}")
        
        logger.info("üéâ Bot appearance setup completed successfully!")
        
    except Exception as e:
        logger.error(f"‚ùå Error setting up bot appearance: {e}")
        raise
    finally:
        await bot.session.close()

async def main():
    """Main function to run the bot appearance setup"""
    print("üöÄ Setting up bot appearance...")
    await setup_bot_appearance()
    print("‚úÖ Bot appearance setup complete!")

if __name__ == "__main__":
    asyncio.run(main())